#
# Copyright (C) 2017 CAMELab
#
# This file is part of SimpleSSD.
#
# SimpleSSD is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SimpleSSD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SimpleSSD.  If not, see <http://www.gnu.org/licenses/>.
#

#
# SimpleSSD Configuration File for Intel 750 400GB NVMe SSD
#
# Section:
# nvme: Non-Volatile Memory Express configuration
# pal:  Parallelism Abstraction Layer configuration
# ftl:  Flash Translation Layer configuration
# icl:  Internal Cache Layer configuration
# dram: DRAM configuration
#

# NVMe interface Configuration
[nvme]

## Set interval for controller main loop
WorkInterval = 22000000  # 220us

## Maximum # of I/O request handling on one loop
MaxRequestCount = 8

## Set maximum number of I/O queue that controller supports
# You should check BAR0 size to fit all doorbell
# Doorbell stride is always 0 (4bytes align)
MaxIOCQueue = 16
MaxIOSQueue = 16

## Set parameters of Weighted Round robin
# Set how many commands should be enqueued to internal FIFO
# before switch to next low priority
WRRHigh = 2     # Medium-priority command will enqueued after two high-priority commands enqueued
WRRMedium = 2   # Low-priority command will enqueued after two medium-priority command enqueued

## Default Namespace
# 1 for create default namespace (full size)
# 0 for no namespaces on boot
DefaultNamespace = 1

## LBA Size
# Set logical block size of default namespace
# If DefaultNamespace is false, this value will ignored
LBASize = 4096

## Enable Disk Image
# 1 for enable I/O to disk image
# 0 for disable disk image
EnableDiskImage = 0

## Disk Image Filename
# If EnableDiskImage is 1, and no file exists, file with size of SSD will created
# If StrictSizeCheck is 1, disk file exists, and size of disk image is not equal to SSD size, it makes error
StrictSizeCheck = 0
DiskImageFile = nvme.img

## Copy-on-Write Disk
# 0 for use normal disk
# 1 for use Copy-on-write disk (Write to disk will not affect disk image file)
UseCopyOnWriteDisk = 0

# Parallelism Abstraction Layer Configuration
[pal]

## Set SSD structure
#  Channel: # of channels in SSD
#  Package: # of packages in one channel
Channel = 6
Package = 10

## Set NAND package structure
#  Die:      # of die in one package
#  Plane:    # of plane in one die
#  Block:    # of block in one plane
#  Page:     # of page in one block
#  PageSize: Size of one page in byte
Die = 1
Plane = 2
Block = 512
Page = 512
PageSize = 16384

## Multi-plane operation
# 1 for enable multi-plane operation
EnableMultiPlaneOperation = 1

## Set type of NAND flash
# Possible values:
#  0: Single Level Cell
#  1: Multi Level Cell
#  2: Triple Level Cell
# Please check NAND timing has valid values
#  SLC: LSB timing should valid
#  MLC: LSB and MSB timing should valid
#  TLC: LSB, CSB and MSB timing should valid
NANDType = 1

## Set NAND timing
LSBRead = 56625000
LSBWrite = 820620000
CSBRead = 0
CSBWrite = 0
MSBRead = 93540000
MSBWrite = 2250000000
Erase = 3000000000

## Set speed and width of DMA in channel in MT/s
# Width should be 8 or 16
# Typical values from ONFi:
#         ONFi   1.x     2.x   3.x~4.x    4.x
#  Timing Mode   SDR   NV-DDR  NV-DDR2  NV-DDR3
#      0         10      40      67       67
#      1         20      67      80       80
#      2         29     100     133      133
#      3         33     133     167      167
#      4         40     167     200      200
#      5         50     200     267      267
#      6          -       -     333      333
#      7          -       -     400      400
#      8          -       -     533      533
#      9          -       -       -      667
#     10          -       -       -      800
DMASpeed = 333
DMAWidth = 8

## Set superblock/page size
# Superblock/page size will multiplied by each values
# Leave empty will disable superblock feature
# Possible values:
#  C: # Channel
#  W: # Package/Way
#  D: # Die
#  P: # Plane (If multi-plane mode is enabled, P will always applied)
SuperblockSize = C

## Set page allocation order
# This order will used when disassembling logical address to physical address
# Possible values:
#  C: Channel
#  W: Package/Way
#  D: Die
#  P: Plane
PageAllocation = CWDP

# Flash Translation Layer Configuration
[ftl]

## Set mapping method
# Possible values:
#  0: Page level mapping
MappingMode = 0

## Set FTL over-provisioning ratio
OverProvisioningRatio = 0.22265625

## Set FTL erase threshold to mark as bad block
EraseThreshold = 100000

## Set FTL warm up
Warmup = 1.0

## Set victim selection algorithm
# Possible values:
#  0: Greedy: Choose least utilized block to clean
#  1: Cost-Benefit: Choose a block that lowest (Utilization / ((1 - Utilization) * Age))
EvictPolicy = 0

## Set garbage collection threshold (ratio of free blocks left)
GCThreshold = 0.05

## Garbage collection mode
# Possible values:
#  0: Reclaim n blocks
#  1: Reclaim blocks until threshold
GCMode = 0

## Specify n (Only in GCMode = 0)
# n > 0
GCReclaimBlocks = 1

## Specify threshold (Only in GCMode = 1)
# t > GCThreshold
GCReclaimThreshold = 0.1

## Specify FTL request handling latency
Latency = 5000000 # 5us

## Specify FTL request queue count
RequestQueue = 8

# Internal Cache Layer Configuration
[icl]

## Set Cache size
# Cacheline size = physical page size * (multi-plane mode ? plane count : 1)
# Directed-map cache: Set way as 1
# Fully-associative cache: Set way value as 0
CacheSize = 536870912   # 512MiB
CacheWaySize = 0

## Set read caching (1 for enable)
EnableReadCache = 1

## Set read prefetching (1 for enable)
EnableReadPrefetch = 1

## Set # of I/O to determine sequential access
# Value < 1 is invalid
# 1 means if 2 contiguous I/O is sequential, prefetch will be enabled
ReadPrefetchCount = 15

## Set size of sequential I/O to determine as sequential access
# At least (Super page size * ratio) should be accessed as sequential
# 0 < ratio
ReadPrefetchRatio = 4.0

## Set write caching (1 for enable)
EnableWriteCache = 1

## Set cache evict policy
# Possible values:
#  0: RANDOM: Evict entry in random fashion
#  1: FIFO: Evict most oldest entry in selected set
#  2: LRU: Evict least recently used entry in selected set
EvictPolicy = 2

# DRAM configuration
[dram]

## Select DRAM model to use
# Possible values:
#  0: Simple DRAM model based on atomic dram controller of gem5
DRAMModel = 0

## DRAM structure parameters
DRAMChannel = 1
DRAMBusWidth = 32
DRAMPageSize = 4096

## DRAM timing parameters
DRAMtCK = 1250
DRAMtRCD = 13750
DRAMtCL = 13750
DRAMtRP = 13750
